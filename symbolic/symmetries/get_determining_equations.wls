#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*(*ClearAll["Global`*"];*)*)
(*Get["C:\\Users\\thivi\\Documents\\GitHub\\koopman-kuramoto\\symbolic\\symmetries\\get_symmetry_generator.wls"];*)
(**)
(*(*Expose generateLexicoTuples to the Global context*)*)
(*Global`generateLexicoTuples=generateLexicoTuples;*)
(**)
(*(* Note: c is a global variable *)*)
(**)
(*(* Get the determining equations for a given complex weight matrix, total degree d, number of oscillators N and bounds on the elements of each tuple p *)*)
(*getDeterminingEquations[A_, d_, N_, bounds_] := Module[{pSubset, pRange, detEqSquare, detEqRectangle, dc},*)
(*pSubset =generateLexicoTuples[d, N, bounds];  (* Indices to non zero coefficients, subset of Z^N in lexicographic order *)*)
(*pRange =generateLexicoTuples[d, N, bounds+ {-2,2}] ; (* Max range for potentially nontrivial determining equations,   subset of Z^N in lexicographic order *)*)
(**)
(*	c[ell_,p_]:=0/;Not[MemberQ[pSubset,p]];      (*Truncation of the coefficients*)*)
(*	dc[ell_,p_] :=      (* Determining equation for a given ell, p and complex weight matrix A *)Sum[A[[ell, k]]c[k, p] + Conjugate[A[[ell, k]]]c[k, p - 2UnitVector[N,ell]+ 2UnitVector[N,k]] - 2Conjugate[A[[ell, k]]]c[ell, p - UnitVector[N,ell]+ UnitVector[N,k]] + Sum[(p[[j]]-1+KroneckerDelta[j,k])Conjugate[A[[j, k]]] c[ell,p - UnitVector[N,j]+ UnitVector[N,k]] - (p[[j]]+1-KroneckerDelta[j,k])A[[j, k]] c[ell,p + UnitVector[N,j]- UnitVector[N,k]],{j, 1, N}], {k, 1, N}];*)
(**)
(*(* Get the first set of determining equations regarding the indices for nonzero coefficien ts in pSubset *)*)
(*detEqSquare = Flatten[Table[dc[i,q],{q,pSubset},{i,1,N}]];*)
(**)
(*(* Get the second set of determining equations regarding the indices for zero coefficients in Complement[pRange,pSubset]*)*)
(*detEqRectangle =DeleteDuplicates[Flatten[Table[With[{currentEquation=dc[i,q]},If[currentEquation=!=0,currentEquation,Nothing]],{q,Complement[pRange,pSubset]},{i,1,N}]]];*)
(**)
(*Return[{detEqSquare, detEqRectangle, pSubset, N}]]*)
(**)
(**)
(*getDeterminingMatrices[DetEqS_, DetEqR_, pSubset_,N_]:=Module[{detMatSquare, detMatRectangle, detMat, nonZeroCoefficients},*)
(*	nonZeroCoefficients = generateCoefficients[N, pSubset];*)
(*	detMatSquare=Normal@CoefficientArrays[DetEqS, nonZeroCoefficients][[2]];*)
(*	detMatRectangle=Normal@CoefficientArrays[DetEqR, nonZeroCoefficients][[2]];*)
(*  detMat = Join[detMatSquare,detMatRectangle,1];*)
(*Return[{detMatSquare, detMatRectangle, detMat, nonZeroCoefficients, pSubset, N}]*)
(*];*)
(**)
(**)
(*(*Expose getDeterminingEquations to the Global context*)Global`getDeterminingEquations=getDeterminingEquations;*)
